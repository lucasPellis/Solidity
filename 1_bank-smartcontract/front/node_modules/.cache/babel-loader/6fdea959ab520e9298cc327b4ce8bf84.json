{"ast":null,"code":"var _jsxFileName = \"/Users/lucaspellis/Desktop/Learn/blockchain/Cadena_projects/1_bank-smartcontract/front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers, utils } from \"ethers\";\nimport abi from \"./contracts/Bank.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [isBankerOwner, setIsBankerOwner] = useState(false);\n  const [inputValue, setInputValue] = useState({\n    withdraw: \"\",\n    deposit: \"\",\n    bankName: \"\"\n  });\n  const [bankOwnerAddress, setBankOwnerAddress] = useState(null);\n  const [customerTotalBalance, setCustomerTotalBalance] = useState(null);\n  const [currentBankName, setCurrentBankName] = useState(null);\n  const [customerAddress, setCustomerAddress] = useState(null);\n  const [error, setError] = useState(null);\n  const contractAddress = '0x0a6e05FB9067d30E9046a5485E324E0C32BC90ef';\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = accounts[0];\n        setIsWalletConnected(true);\n        setCustomerAddress(account);\n        console.log(\"Account Connected: \", account);\n      } else {\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n        console.log(\"No Metamask detected\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getBankName = async () => {\n    try {\n      if (window.ethereum) {\n        //read data\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let bankName = await bankContract.bankName();\n        bankName = utils.parseBytes32String(bankName);\n        setCurrentBankName(bankName.toString());\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setBankNameHandler = async event => {\n    event.preventDefault();\n\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const txn = await bankContract.setBankName(utils.formatBytes32String(inputValue.bankName));\n        console.log(\"Setting Bank Name...\");\n        await txn.wait();\n        console.log(\"Bank Name Changed\", txn.hash);\n        getBankName();\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getbankOwnerHandler = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let owner = await bankContract.bankOwner();\n        setBankOwnerAddress(owner);\n        const [account] = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        if (owner.toLowerCase() === account.toLowerCase()) {\n          setIsBankerOwner(true);\n        }\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const customerBalanceHandler = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let balance = await bankContract.getCustomerBalance();\n        setCustomerTotalBalance(utils.formatEther(balance));\n        console.log(\"Retrieved balance...\", balance);\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleInputChange = event => {\n    setInputValue(prevFormData => ({ ...prevFormData,\n      [event.target.name]: event.target.value\n    }));\n  };\n\n  const deposityMoneyHandler = async event => {\n    try {\n      event.preventDefault();\n\n      if (window.ethereum) {\n        //write data\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const txn = await bankContract.depositMoney({\n          value: ethers.utils.parseEther(inputValue.deposit)\n        });\n        console.log(\"Deposting money...\");\n        await txn.wait();\n        console.log(\"Deposited money...done\", txn.hash);\n        customerBalanceHandler();\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const withDrawMoneyHandler = async event => {\n    try {\n      event.preventDefault();\n\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let myAddress = await signer.getAddress();\n        console.log(\"provider signer...\", myAddress);\n        const txn = await bankContract.withDrawMoney(myAddress, ethers.utils.parseEther(inputValue.withdraw));\n        console.log(\"Withdrawing money...\");\n        await txn.wait();\n        console.log(\"Money with drew...done\", txn.hash);\n        customerBalanceHandler();\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getBankName();\n    getbankOwnerHandler();\n    customerBalanceHandler();\n  }, [isWalletConnected]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"headline\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"headline-gradient\",\n        children: \"Bank Contract Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 32\n      }, this), \" \\uD83D\\uDCB0\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"customer-section px-10 pt-5 pb-10\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-2xl text-red-700\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: currentBankName === \"\" && isBankerOwner ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\\"Setup the name of your bank.\\\" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-3xl font-bold\",\n          children: currentBankName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-7 mb-9\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-style\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-style\",\n            onChange: handleInputChange,\n            name: \"deposit\",\n            placeholder: \"0.0000 ETH\",\n            value: inputValue.deposit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-purple\",\n            onClick: deposityMoneyHandler,\n            children: \"Deposit Money In ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-10 mb-10\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-style\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-style\",\n            onChange: handleInputChange,\n            name: \"withdraw\",\n            placeholder: \"0.0000 ETH\",\n            value: inputValue.withdraw\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-purple\",\n            onClick: withDrawMoneyHandler,\n            children: \"Withdraw Money In ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: \"Customer Balance: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 14\n          }, this), customerTotalBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: \"Bank Owner Address: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 14\n          }, this), bankOwnerAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [isWalletConnected && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"font-bold\",\n            children: \"Your Wallet Address: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 36\n          }, this), customerAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-connect\",\n          onClick: checkIfWalletIsConnected,\n          children: isWalletConnected ? \"Wallet Connected 🔒\" : \"Connect Wallet 🔑\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), isBankerOwner && /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"bank-owner-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl border-b-2 border-indigo-500 px-10 py-4 font-bold\",\n        children: \"Bank Admin Panel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-10\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form-style\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-style\",\n            onChange: handleInputChange,\n            name: \"bankName\",\n            placeholder: \"Enter a Name for Your Bank\",\n            value: inputValue.bankName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn-grey\",\n            onClick: setBankNameHandler,\n            children: \"Set Bank Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OE+y8k0QeHlbUzX9O85jgLaMGl8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lucaspellis/Desktop/Learn/blockchain/Cadena_projects/1_bank-smartcontract/front/src/App.js"],"names":["useState","useEffect","ethers","utils","abi","App","isWalletConnected","setIsWalletConnected","isBankerOwner","setIsBankerOwner","inputValue","setInputValue","withdraw","deposit","bankName","bankOwnerAddress","setBankOwnerAddress","customerTotalBalance","setCustomerTotalBalance","currentBankName","setCurrentBankName","customerAddress","setCustomerAddress","error","setError","contractAddress","contractABI","checkIfWalletIsConnected","window","ethereum","accounts","request","method","account","console","log","getBankName","provider","providers","Web3Provider","signer","getSigner","bankContract","Contract","parseBytes32String","toString","setBankNameHandler","event","preventDefault","txn","setBankName","formatBytes32String","wait","hash","getbankOwnerHandler","owner","bankOwner","toLowerCase","customerBalanceHandler","balance","getCustomerBalance","formatEther","handleInputChange","prevFormData","target","name","value","deposityMoneyHandler","depositMoney","parseEther","withDrawMoneyHandler","myAddress","getAddress","withDrawMoney"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { ethers, utils } from \"ethers\";\nimport abi from \"./contracts/Bank.json\";\n\nfunction App() {\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [isBankerOwner, setIsBankerOwner] = useState(false);\n  const [inputValue, setInputValue] = useState({ withdraw: \"\", deposit: \"\", bankName: \"\" });\n  const [bankOwnerAddress, setBankOwnerAddress] = useState(null);\n  const [customerTotalBalance, setCustomerTotalBalance] = useState(null);\n  const [currentBankName, setCurrentBankName] = useState(null);\n  const [customerAddress, setCustomerAddress] = useState(null);\n  const [error, setError] = useState(null);\n\n  const contractAddress = '0x0a6e05FB9067d30E9046a5485E324E0C32BC90ef';\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n        const account = accounts[0];\n        setIsWalletConnected(true);\n        setCustomerAddress(account);\n        console.log(\"Account Connected: \", account);\n      } else {\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n        console.log(\"No Metamask detected\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const getBankName = async () => {\n    try {\n      if (window.ethereum) {\n\n        //read data\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let bankName = await bankContract.bankName();\n        bankName = utils.parseBytes32String(bankName);\n        setCurrentBankName(bankName.toString());\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const setBankNameHandler = async (event) => {\n    event.preventDefault();\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const txn = await bankContract.setBankName(utils.formatBytes32String(inputValue.bankName));\n        console.log(\"Setting Bank Name...\");\n        await txn.wait();\n        console.log(\"Bank Name Changed\", txn.hash);\n        getBankName();\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const getbankOwnerHandler = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let owner = await bankContract.bankOwner();\n        setBankOwnerAddress(owner);\n\n        const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\n\n        if (owner.toLowerCase() === account.toLowerCase()) {\n          setIsBankerOwner(true);\n        }\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const customerBalanceHandler = async () => {\n    try {\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let balance = await bankContract.getCustomerBalance();\n        setCustomerTotalBalance(utils.formatEther(balance));\n        console.log(\"Retrieved balance...\", balance);\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const handleInputChange = (event) => {\n    setInputValue(prevFormData => ({ ...prevFormData, [event.target.name]: event.target.value }));\n  }\n\n  const deposityMoneyHandler = async (event) => {\n    try {\n      event.preventDefault();\n      if (window.ethereum) {\n        //write data\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const txn = await bankContract.depositMoney({ value: ethers.utils.parseEther(inputValue.deposit) });\n        console.log(\"Deposting money...\");\n        await txn.wait();\n        console.log(\"Deposited money...done\", txn.hash);\n\n        customerBalanceHandler();\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const withDrawMoneyHandler = async (event) => {\n    try {\n      event.preventDefault();\n      if (window.ethereum) {\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const bankContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let myAddress = await signer.getAddress()\n        console.log(\"provider signer...\", myAddress);\n\n        const txn = await bankContract.withDrawMoney(myAddress, ethers.utils.parseEther(inputValue.withdraw));\n        console.log(\"Withdrawing money...\");\n        await txn.wait();\n        console.log(\"Money with drew...done\", txn.hash);\n\n        customerBalanceHandler();\n\n      } else {\n        console.log(\"Ethereum object not found, install Metamask.\");\n        setError(\"Please install a MetaMask wallet to use our bank.\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    getBankName();\n    getbankOwnerHandler();\n    customerBalanceHandler()\n  }, [isWalletConnected])\n\n  return (\n    <main className=\"main-container\">\n      <h2 className=\"headline\"><span className=\"headline-gradient\">Bank Contract Project</span> 💰</h2>\n      <section className=\"customer-section px-10 pt-5 pb-10\">\n        {error && <p className=\"text-2xl text-red-700\">{error}</p>}\n        <div className=\"mt-5\">\n          {currentBankName === \"\" && isBankerOwner ?\n            <p>\"Setup the name of your bank.\" </p> :\n            <p className=\"text-3xl font-bold\">{currentBankName}</p>\n          }\n        </div>\n        <div className=\"mt-7 mb-9\">\n          <form className=\"form-style\">\n            <input\n              type=\"text\"\n              className=\"input-style\"\n              onChange={handleInputChange}\n              name=\"deposit\"\n              placeholder=\"0.0000 ETH\"\n              value={inputValue.deposit}\n            />\n            <button\n              className=\"btn-purple\"\n              onClick={deposityMoneyHandler}>Deposit Money In ETH</button>\n          </form>\n        </div>\n        <div className=\"mt-10 mb-10\">\n          <form className=\"form-style\">\n            <input\n              type=\"text\"\n              className=\"input-style\"\n              onChange={handleInputChange}\n              name=\"withdraw\"\n              placeholder=\"0.0000 ETH\"\n              value={inputValue.withdraw}\n            />\n            <button\n              className=\"btn-purple\"\n              onClick={withDrawMoneyHandler}>\n              Withdraw Money In ETH\n            </button>\n          </form>\n        </div>\n        <div className=\"mt-5\">\n          <p><span className=\"font-bold\">Customer Balance: </span>{customerTotalBalance}</p>\n        </div>\n        <div className=\"mt-5\">\n          <p><span className=\"font-bold\">Bank Owner Address: </span>{bankOwnerAddress}</p>\n        </div>\n        <div className=\"mt-5\">\n          {isWalletConnected && <p><span className=\"font-bold\">Your Wallet Address: </span>{customerAddress}</p>}\n          <button className=\"btn-connect\" onClick={checkIfWalletIsConnected}>\n            {isWalletConnected ? \"Wallet Connected 🔒\" : \"Connect Wallet 🔑\"}\n          </button>\n        </div>\n      </section>\n      {\n        isBankerOwner && (\n          <section className=\"bank-owner-section\">\n            <h2 className=\"text-xl border-b-2 border-indigo-500 px-10 py-4 font-bold\">Bank Admin Panel</h2>\n            <div className=\"p-10\">\n              <form className=\"form-style\">\n                <input\n                  type=\"text\"\n                  className=\"input-style\"\n                  onChange={handleInputChange}\n                  name=\"bankName\"\n                  placeholder=\"Enter a Name for Your Bank\"\n                  value={inputValue.bankName}\n                />\n                <button\n                  className=\"btn-grey\"\n                  onClick={setBankNameHandler}>\n                  Set Bank Name\n                </button>\n              </form>\n            </div>\n          </section>\n        )\n      }\n    </main>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}